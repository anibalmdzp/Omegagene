=======================================
Tutorial for Coarse-grained simulations
=======================================

------------------------------
Download myPresto/omegagene
------------------------------

Linux system with Python environments is required to use myPresto/omegage.  
To download myPresto/omegagene, execute following commands on your terminal:

::

  git clone https://github.com/kotakasahara/omegagene.git


If you are not so familiar to Linux system, we offer you to use our the docker container.

::

  git clone https://github.com/terapizawa/myPresto-omegagene.git

------------------------------------
Instrallation
------------------------------------

Setting up a target build folder:

::

        # in <PROJECT_ROOT> directory
       	$ mkdir target
        $ cd target

Configuring the build. CMake will determine all the external software dependencies for the selected build variant, and exit with errors if the dependency requirements are not met.  CMake must be invoked on the `CMakeLists.txt` file in the **<PROJECT_ROOT>** directory.
Run the following command to configure for building the desired variant of myPresto/omegagene in <PROJECT_ROOT>/target directory

::

	$ cmake -DCELESTE_WO_NS=1 .. 

If you use GPU, the option -DCELESTE_GPUHPS=1 is required for coarse-grained simulations.
Building the software:

::
        $ make

------------------------------------
MD simulations with coarse grained model
------------------------------------

~~~~~~~~~~~~~~
Requirements
~~~~~~~~~~~~~~

These python libralies described bellow are required for this process.

- sys
- re
- os
- numpy
- parser
- struct
- scipy

In this tutorial, use of bash enviroment is assumed.

~~~~~~~~~~~~~~
Input Files  
~~~~~~~~~~~~~~
The input files required for conducting MD simulations using myPresto/omegagene 
are described bellow, same as conducting it using myPresto/psygene.

- Topology file (generated by Tplgene program)
- Restart file (including the initial coordinates and velocities)
- System configuration file (.cls)
- Simulation configuration files (md.inp, md.inp.run)
- Protein files (*.pdb, param.dat, ...)


1. Set paths

::

  $ export OMEGATK=${PATH_TO_OMEGAGENE}/omegagene/toolkit/

PATH_TO_OMEGAGENE must be set by yourself depending on your environment.    

2. make your target directory.  

::

  $ mkdir tgt_dir

3. change the working directory

::

  cd ${PATH_TO_YOUR_TARGET_DIRECTORY}/tgt_dir

then,

::

  cp ${PATH_TO_OMEGAGENE}/samples/cg_q8/* ${PATH_TO_YOUR_TARGET_DIRECTORY}/tgt_dir/

4. make a topology file  

::

  python2.7 ${OMEGATK}/gen_tpl.py --pdb inp.pdb --param param.dat --tpl md.tpl --molname mol1

5. make a restart file  

::

  python2.7 ${OMEGATK}/presto_generate_velocities.py   -i inp.pdb   --i-tpl md.tpl   -t 100   -o md.restart   -s ${RANDOM}  --mol --check

In bash environment, the environmental variable ${RANDOM} generates a random number. When it does not work in your environment, set a integer value into the variable ${RANDOM} as a random seed.

6. make a cls file  

::

  python2.7 ${OMEGATK}/mdinput_generator.py -i md.inp -o md.inp.cls -v v.0.52 > log_inputgen.txt

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Set up your simulation conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
These three files are quite important for conducting coarse grained MD simulations.

- atom_groups.inp
- md.inp
- md.inp.run


**atom_groups.inp**

::

  mol1 1-8 # amino No for each molecules
  mol2 9-16
  all 1-16　# all amino acids in the input PDB file


**md.inp**
::

  --fn-i-tpl               out.tpl          # tpl file for the simulations
  --fn-i-initial-pdb       inp.pdb          # input PDB files
  --fn-i-restart           md.restart       # all initial positions for the input PDB file
  --cell-x                 200　           # maximum range of x axis
  --cell-y                 200             # maximum range of x axis
  --cell-z                 200             # maximum range of x axis
  --cell-center-x          70              # center position for x axis
  --cell-center-y          70              # center position for y axis
  --cell-center-z          70              # center position for z axis
  --fn-i-atom-groups       atom_groups.inp  # information for all amino acids and its molecules


**md.inp.run**

::

  --processor                   single        ;    # the numner of processors for conducting MD
  --gpu-device-id               0                  # GPU device ID for conducting MD
  --mode                        md            ;    # simulation mode
  --integrator                  langevin  ;        # the method of integration
  --langevin-gamma              1.0   ;      ;     # the parameter for friction coefficient
  --cutoff                      20.0          ;    # the cut-off distance in angstrome
  --n-steps                     2000       ;    # the simulation steps
  --time-step                   5            ;    # the integration time step (fs)
  --electrostatic               debye-huckel  ;    # the electrostatic interactions
  --debye-huckel-dielectric     85            ;    # the value of relative dielectric constant for debye-huckel equation
  --debye-huckel-temperature    300           ;    # the temperature for debye-huckel equation
  --debye-huckel-ionic-strength 0.00015       ;    # the ionic-strength value for debye-huckel equation
  --ele-alpha                   0             ;    # the alpha parameter for ZMM method
  --thermostat                  none               # options for using thermostat in MD
  --temperature                 300           ;    # simulation temperature
  --com-motion                  cancel      ;      # the option for canceling the motion of center-of-mass (COM)
  --com-cancel-group-name       all                # the name of predefined group for the canceling of COM motion
  --group-o-coord    all                           # the name of predefined group to output the trajectory
  --print-interval-log          100           ;    # the interval steps of making logs
  --print-interval-coord        100          ;   # the interval steps of making cods
  --fn-o-coord                  md.cod        ;    # the name of the trajectory output file
  --format-o-coord              presto             # the file format for the trajectory (only "presto" is supported currently)
  --fn-o-restart                md.restart         # the file contains the final conformation's positions
  --nsgrid-cutoff               23                 # the threshhold distance for neighbor molecules
  --nsgrid-update-intvl         10                 # the update interval for nsgrid
  --hydrophobicity-scale-epsiron 0.2               # a parameter for HPS model
  --nonbond hydrophobicity-scale-lj                # indication of using Lennerd-Jones potential



~~~~~~~~~~~~~~~~~~~~~~~
4. Execute omegagene  
~~~~~~~~~~~~~~~~~~~~~~~

To execute the MD simulation using myPresto/omegagene, please conduct the command bellow, then please wait untill the job is done.

::

  ${PATH_TO_THE_DIRECTORY_OMEGAGENE_INSTALLED}/omegagene_wons  --cfg md.inp.run --inp md.inp.cls > md.out


The trajectory file *md.cod* is written in myPresto format.
This can be converted into the Gromacs trajectory format by the following command.


::

  python2.7 ${OMEGATK}/trajconv_presto_gro.py --i-pdb inp.pdb --i-crd md.cod -o md.trr --lx 200 --ly 200 --lz 200

*--lx*, *--ly*, and *--lz* options are the cell dimensions for x, y, and z axes.

You can also change restart file (the structure at the final step) to pdb file.

::

  python2.7 ${OMEGATK}/restart_to_pdb.py -i md.restart --i-pdb inp.pdb -o finalstep.pdb

The trajectory can be visualized by some visualizers (e.g., VMD and PyMOL).

